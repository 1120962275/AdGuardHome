import AddressInfo, { IAddressInfo } from './AddressInfo';

// This file was autogenerated. Please do not change.
// All changes will be overwrited on commit.
export interface IInitialConfiguration {
    dns?: IAddressInfo;
    password?: string;
    username?: string;
    web?: IAddressInfo;
}

export default class InitialConfiguration {
    readonly _dns: AddressInfo | undefined;

    get dns(): AddressInfo | undefined {
        return this._dns;
    }

    readonly _password: string | undefined;

    /**
     * Description: Basic auth password
     * Example: password
     */
    get password(): string | undefined {
        return this._password;
    }

    readonly _username: string | undefined;

    /**
     * Description: Basic auth username
     * Example: admin
     */
    get username(): string | undefined {
        return this._username;
    }

    readonly _web: AddressInfo | undefined;

    get web(): AddressInfo | undefined {
        return this._web;
    }

    constructor(props: IInitialConfiguration) {
        if (props.dns) {
            this._dns = new AddressInfo(props.dns);
        }
        if (typeof props.password === 'string') {
            this._password = props.password.trim();
        }
        if (typeof props.username === 'string') {
            this._username = props.username.trim();
        }
        if (props.web) {
            this._web = new AddressInfo(props.web);
        }
    }

    serialize(): IInitialConfiguration {
        const data: IInitialConfiguration = {
        };
        if (typeof this._dns !== 'undefined') {
            data.dns = this._dns.serialize();
        }
        if (typeof this._password !== 'undefined') {
            data.password = this._password;
        }
        if (typeof this._username !== 'undefined') {
            data.username = this._username;
        }
        if (typeof this._web !== 'undefined') {
            data.web = this._web.serialize();
        }
        return data;
    }

    validate(): string[] {
        const validate = {
            dns: !this._dns ? true : this._dns.validate().length === 0,
            web: !this._web ? true : this._web.validate().length === 0,
            username: !this._username ? true : typeof this._username === 'string' && !this._username ? true : this._username,
            password: !this._password ? true : typeof this._password === 'string' && !this._password ? true : this._password,
        };
        const isError: string[] = [];
        Object.keys(validate).forEach((key) => {
            if (!(validate as any)[key]) {
                isError.push(key);
            }
        });
        return isError;
    }

    update(props: Partial<IInitialConfiguration>): InitialConfiguration {
        return new InitialConfiguration({ ...this.serialize(), ...props });
    }
}
