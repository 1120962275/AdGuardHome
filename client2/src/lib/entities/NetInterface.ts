// This file was autogenerated. Please do not change.
// All changes will be overwrited on commit.
export interface INetInterface {
    flags?: string;
    hardware_address?: string;
    ip_addresses?: string[];
    mtu?: number;
    name?: string;
}

export default class NetInterface {
    readonly _flags: string | undefined;

    /**
     * Description: undefined
     * Example: up|broadcast|multicast
     */
    get flags(): string | undefined {
        return this._flags;
    }

    readonly _hardware_address: string | undefined;

    /**
     * Description: undefined
     * Example: 52:54:00:11:09:ba
     */
    get hardwareAddress(): string | undefined {
        return this._hardware_address;
    }

    readonly _ip_addresses: string[] | undefined;

    get ipAddresses(): string[] | undefined {
        return this._ip_addresses;
    }

    readonly _mtu: number | undefined;

    get mtu(): number | undefined {
        return this._mtu;
    }

    readonly _name: string | undefined;

    /**
     * Description: undefined
     * Example: eth0
     */
    get name(): string | undefined {
        return this._name;
    }

    constructor(props: INetInterface) {
        if (typeof props.flags === 'string') {
            this._flags = props.flags.trim();
        }
        if (typeof props.hardware_address === 'string') {
            this._hardware_address = props.hardware_address.trim();
        }
        if (props.ip_addresses) {
            this._ip_addresses = props.ip_addresses;
        }
        if (typeof props.mtu === 'number') {
            this._mtu = props.mtu;
        }
        if (typeof props.name === 'string') {
            this._name = props.name.trim();
        }
    }

    serialize(): INetInterface {
        const data: INetInterface = {
        };
        if (typeof this._flags !== 'undefined') {
            data.flags = this._flags;
        }
        if (typeof this._hardware_address !== 'undefined') {
            data.hardware_address = this._hardware_address;
        }
        if (typeof this._ip_addresses !== 'undefined') {
            data.ip_addresses = this._ip_addresses;
        }
        if (typeof this._mtu !== 'undefined') {
            data.mtu = this._mtu;
        }
        if (typeof this._name !== 'undefined') {
            data.name = this._name;
        }
        return data;
    }

    validate(): string[] {
        const validate = {
            flags: !this._flags ? true : typeof this._flags === 'string' && !this._flags ? true : this._flags,
            hardware_address: !this._hardware_address ? true : typeof this._hardware_address === 'string' && !this._hardware_address ? true : this._hardware_address,
            name: !this._name ? true : typeof this._name === 'string' && !this._name ? true : this._name,
            ip_addresses: !this._ip_addresses ? true : this._ip_addresses.reduce((result, p) => result && typeof p === 'string', true),
            mtu: !this._mtu ? true : typeof this._mtu === 'number',
        };
        const isError: string[] = [];
        Object.keys(validate).forEach((key) => {
            if (!(validate as any)[key]) {
                isError.push(key);
            }
        });
        return isError;
    }

    update(props: Partial<INetInterface>): NetInterface {
        return new NetInterface({ ...this.serialize(), ...props });
    }
}
